
# Première étape : La maquette HTML

Une maquette HTML qui illustre le fonctionnement de l'application telle que je l'imagine
Pas de CSS
Pas de serveur, que du statique

Ce fut rapide (moins d'une heure) et le fait d'intéragir avec le résultat m'a donné envie 
de continuer (... même si c'était moche)

# Deuxième étape : Le serveur

Ajout d'un serveur express qui va afficher les pages statiques précédement créées
via le moteur de template EJS
Je n'ai pas modifié les pages si ce n'est les url des liens et formulaires 
(j'ai enlevé le .html, /options.html est devenu /options)

Ce fut rapide encore une fois (moins d'une heure)
Le rendu n'a pas changé mais maintenant j'ai un serveur et 
un moteur de template fonctionnels

# Troisième étape : la logique

Ajout de la logique dans les template pour afficher et modifier les sondages
Le stockage des sondages se fait en mémoire

J'ai maintenant une application fonctionnelle :-)

Ca m'a pris plus de temps (3h30), en particulier à cause 
de l'implémentation du jugement majoritaire.

# Quatrième étape : Organisation de la persistence fichier

Ajout d'un dossier contenant deux exemples de sondages tels que j'imagine qu'ils seront stockés 
une fois la persistence fichier mise en place

Ca m'a pris 1h et ca me permet de me rassurer sur le côté utilisable 

Le fait d'ajouter la notice d'utilisation directement dans le contenu de chaque fichier me plait beaucoup


# Cinquième étape : Implémentation de la persistence fichier

Ca m'a pris beaucoup plus de temps ! Environ 4h30

Le fait de stocker la documentation dans le fichier qui contient la données rend difficile l'implémentation 
des fonctions d'écriture et de lecture

Je pars sur le fait d'ajouter des fichiers status.readme.md, title.readme.md, options.readme.md... qui 
contiennent la doc

# 1ère tentation : Embarquer le serveur node dans un service worker

J'y ai passé environ 5h 

J'ai commencé par réutiliser ce projet : https://github.com/bahmutov/express-service

J'ai fait les corrections manuelles suivantes :

http.ServerResponse = Object.create({}, http.ServerResponseProto)
+ http.ServerResponse.prototype = http.ServerResponseProto

var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
- if (nodeVer) {
+ if (false && nodeVer) {
(https://github.com/ashtuchkin/iconv-lite/issues/204)

Mais j'ai toujours des erreurs...

Est ce que je ne m'égare pas un peu ?

Allez ! on laisse ca de côté.

# Sixième étape : Générer un exécutable

J'y ai passé environ 1H30

Les outils que j'ai trouvé pour ca sont :

- pkg (https://github.com/vercel/pkg)
- nexe (https://github.com/nexe/nexe)

Les deux semblent fonctionner mais le fait d'interagir avec un dossier externe a l'air plus galère avec pkg.
Je pars sur nexe. 


# Septième étape : Ajouter du style

Au total j'ai du passer 3h à avoir une version desktop qui me plaisait

L'idée est d'utiliser un framework classless

Je commence par un au hasard qui me paraît pas trop moche : MVP.css (https://andybrewer.github.io/mvp/)
... mais ca ne me convient pas, il met les <form> dans des cards à chaque fois et ca ne rend pas bien

Je parcourt cette liste : https://github.com/dbohdan/classless-css

J'essaie Tacit (https://github.com/yegor256/tacit)
Ca me plait mieux, j'ai moins l'impression de me battre avec les choix imposés

Il reste un problème : sous mobile il n'y a pas de marges autour de la <section>

# Huitième étape : Ajouter la synchro git

Cette synchro est une manière de ne pas tout perdre si le serveur crash

Ca m'a pris 1h MAIS seulement parce que j'avais déjà codé la synchronisation git dans un autre projet

Cette étape a été l'occasion de séparer les données du code

# Neuvième étape : Justification des choix techniques

Je prends 30 minutes pour poser par écrit la justification des choix techniques 
dans le fichier CHOICES.txt 

# Dixième étape : Ménage

Je prends 2h pour :
- nettoyer toute trace de mon essai pour embarquer express dans un service worker (on verra ca plus tard)
- regrouper la doc dans un seul fichier nommé STRUCTURE.md, plus facile à maintenir
- déplacer les variables globales en dur dans un fichier configuration.js à la racine
- isoler le code de chaque route dans un fichier séparé situé dans /views ou /actions
- renommé les fichiers .js pour mieux faire ressortir leur rôle
- séparer l'application express du stockage fichier et de la synchronisation git
- compléter le README pour facilement entrer dans le projet
- factoriser l'entête des pages HTML dans /views/partials/head

# Next pour valider le concept :

TODO Héberger sur un RPi

# Refacto et fonctions bonus

TODO Simplifier le format du stockage fichier ?
TODO Utiliser isomorphic git au lieu du git sur le pc ?
TODO Embarquer le serveur node dans un service worker pour faire une appli 100% front
TODO Peaufiner le style sous mobile
TODO Ajouter une favicon
TODO Renommer les fichiers pour que leur rôle soit plus explicite
TODO Valider la logique de jugement majoritaire avec un framework de test maison
TODO Gérer les cas d'égalité dans les résultats
TODO Ajouter la delegation à un autre utilisateur
TODO Tester Turbolinks pour ajouter un côté plus réactif ?

# Interrogations :

TODO Est ce qu'on laisse le code et les données au même endroit ???
TODO Comment scinder les vues et les actions sans introduire de mécanisme particulier
TODO La persistence est verbeuse, est ce qu'une couche domaine doit être ajoutée par dessus ?
TODO Les status n'ont pas de nom d'affichage comme les options ou les grades, en ajouter ? 
